#include<stdio.h>
#include<stdbool.h>
#include<string.h>

EXEC SQL INCLUDE SQLCA; 

EXEC SQL BEGIN DECLARE SECTION;

char name[22];
char url[42];
char pubid[10];
char title[70];
char publisher[50];
char appearsin[10];

sqlint32 aid;
sqlint32 aorder;
sqlint32 year;
sqlint32 volume;
sqlint32 number;
sqlint32 startpage;
sqlint32 endpage;

sqlint32 exist;

char db[6] = "cs348";
char *authorsIds;

EXEC SQL END DECLARE SECTION;

void update_publication(){
	char *temp_pubid;
	char *temp_title;
	temp_pubid = strtok(NULL,"#");
	strcpy(pubid, temp_pubid);
	temp_title = strtok(NULL,"#");
	strcpy(title, temp_title);

	EXEC SQL
		select count(*) INTO :exist 
		from publication p
		where p.pubid = :pubid;

	if (exist > 0){
		EXEC SQL 
			update publication 
			set title = :title 
			where pubid = :pubid;
	} else {
		EXEC SQL 
			insert into publication 
			values (:pubid, :title);
	}
}

void override_authors(){
	aid = strtok(authorsIds, ";");
    for(aorder = 1; aid != 0; aorder++) {
        aid = atoi(aid); 
        EXEC SQL
            insert into wrote (aid, pubid, aorder)
            values (:aid, :pubid, :aorder);
        aid = strtok(NULL, ";");
    }
}

void update_author(){
	char *name_temp;
	aid = atoi(strtok(NULL, "#"));
    name_temp = strtok(NULL, ")");
    strcpy(name, name_temp);

	EXEC SQL
		select count(*) INTO :exist 
		from author a 
		where a.aid = :aid;

	if (exist > 0){
		EXEC SQL 
			update author 
			set name = :name 
			where aid = :aid;
	} else {
		EXEC SQL 
			insert into author (aid, name) 
			values (:aid, :name);
	}
}

void update_authorurl(){
	char *url_temp;
	aid = atoi(strtok(NULL,"#"));
	url_temp = strtok(NULL,")");
	strcpy(url, url_temp);

	EXEC SQL 
		update author 
		set url = :url 
		where aid = :aid;
}

void update_book(){
	update_publication();

	authorsIds = strtok(NULL,"#");
	char *temp_publisher;
	temp_publisher = strtok(NULL,"#");
	strcpy(publisher, temp_publisher);
	year = atoi(strtok(NULL,")"));

	override_authors();
	
	EXEC SQL
        select count(*) INTO :exist
        from book b
        where b.pubid = :pubid;

    if(exist) {
        EXEC SQL
            update book
            set publisher = :publisher, year = :year
            where pubid = :pubid;
    
    }
    else {
        EXEC SQL
            insert into book (pubid, publisher, year)
            values (:pubid, :publisher, :year);    
    }
}

void update_journal(){
	update_publication();
	volume = atoi(strtok(NULL,"#"));
	number = atoi(strtok(NULL,"#"));
	year = atoi(strtok(NULL,")"));
	
    EXEC SQL
        select count(*) INTO :exist
        from journal
        where pubid = :pubid;

    if(exist) {
        EXEC SQL
            update journal
            set volume = :volume, number = :number, year = :year
            where pubid = :pubid;
    }
    else {
        EXEC SQL
            insert into journal (pubid, volume, number, year)
            values (:pubid, :volume, :number, :year);
    }
}

void update_proceedings(){
	update_publication();
	year = atoi(strtok(NULL,")"));

	EXEC SQL
        select count(*) INTO :exist
        from proceedings pro
        where pro.pubid = :pubid;

    if(exist) {
        EXEC SQL
            update proceedings
            set year = :year
            where pubid = :pubid;
    }
    else {
        EXEC SQL
            insert into proceedings (pubid, year)
            values (:pubid, :year);
    }
}

void update_article(){
	char *authors, *temp_appearsin;

	update_publication();
	authors = strtok(NULL,"#");
	temp_appearsin = strtok(NULL,"#");
	strcpy(appearsin, temp_appearsin);
	startpage = atoi(strtok(NULL,"#"));
	endpage = atoi(strtok(NULL,"#"));

	EXEC SQL
        select count(*) INTO :exists
        from article art
        where art.pubid = :pubid;

    if(exists) {
        EXEC SQL
            update article
            set appearsin = :appearsin, startpage = :startpage, endpage = :endpage
            where pubid = :pubid;
    }
    else {
        EXEC SQL
            insert into article (pubid, appearsin, startpage, endpage)
            values (:pubid, :appearsin, :startpage, :endpage);
    }
}

int main(){
	EXEC SQL WHENEVER SQLERROR  GO TO error;
	EXEC SQL CONNECT TO :db;

	char *line = NULL;
	char *t = NULL;
	size_t length = 0;

	getline(&line, &length, stdin);
	while(!feof(stdin)) {
		t = strtok(line, "(");
		if (!strcmp(t,"author")) update_author();
		if (!strcmp(t,"authorurl")) update_authorurl();
		if (!strcmp(t,"book")) update_book();
		if (!strcmp(t,"journal")) update_journal();
		if (!strcmp(t,"proceedings")) update_proceedings();
		if (!strcmp(t,"article")) update_article();
		getline(&line, &length, stdin);
	}
	free(line);
	EXEC SQL COMMIT;
	EXEC SQL CONNECT reset;

	return 0;
error:
	check_error("Error",&sqlca);
	EXEC SQL WHENEVER SQLERROR CONTINUE;

	EXEC SQL ROLLBACK;
	EXEC SQL CONNECT reset;
	return 1;
}
